{"version":3,"sources":["Modal.js","Main.js","serviceWorker.js","index.js"],"names":["Modal","props","state","getInitialState","handleClose","setState","handleShow","bind","handleStory","handleChange","handleSubmit","addStory","userName","userStory","submitted","show","e","preventDefault","this","text","swal","title","icon","process","displayAlert","target","value","formValue","then","className","onClick","faPlus","size","onHide","centered","Header","closeButton","Title","Body","rows","name","onChange","Footer","id","type","style","display","Component","Main","stories","viewBoard","displayBoard","changeValue","addLike","story","postData","row","likes","href","length","map","index","key","faHeart","src","height","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f8e9711e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Modal as BootstrapModal } from 'react-bootstrap';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport swal from 'sweetalert';\n\nclass Modal extends Component{\n  constructor(props){\n    super(props)\n\n    this.state = this.getInitialState();\n\n    this.handleClose = () => this.setState(this.getInitialState());\n\n    this.handleShow = this.handleShow.bind(this);\n    this.handleStory = this.handleStory.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  getInitialState(){\n    return {\n      addStory: false,\n      userName: '',\n      userStory: '',\n      submitted: false,\n      show: false\n    }\n  }\n\n  handleShow(e){\n    e.preventDefault();\n    this.setState({\n      show:true\n    });\n  }\n\n  displayAlert(text){\n    swal({\n      title: \"Oops\",\n      text: text,\n      icon: process.env.PUBLIC_URL + '/static/img/require.jpg',\n    });\n  }\n\n  handleStory(e){\n    e.preventDefault();\n    if(this.state.userName){\n      this.setState({\n        addStory: true\n      });\n    }else{\n      this.displayAlert(\"You haven't told us your name yet.\");\n    }\n\n  }\n\n  handleChange(e) {\n    if(this.state.addStory){\n      this.setState({\n        userStory: e.target.value\n      });\n    }else{\n      this.setState({\n        userName: e.target.value\n      });\n    }\n  }\n\n  handleSubmit(){\n    if(this.state.userStory){\n      this.props.formValue(\n        this.state.userName,\n        this.state.userStory\n      );\n\n      swal({\n        title: \"Story Submitted!\",\n        text: \"Thanks for sharing with us. Your story can be viewed in the board.\",\n        icon: \"success\",\n      })\n      .then(() => {\n        this.setState(this.getInitialState());\n      });\n    }else{\n      this.displayAlert(\"Tell us your story before you go!\");\n    }\n\n  }\n\n  render(){\n    return(\n      <div>\n        <button className='btn btn-normal' onClick={this.handleShow}>Add Post<FontAwesomeIcon icon={faPlus} size='xs' className='ml-1'/></button>\n        <BootstrapModal show={this.state.show} onHide={this.handleClose} centered>\n          <BootstrapModal.Header closeButton>\n            <BootstrapModal.Title>Add Post</BootstrapModal.Title>\n          </BootstrapModal.Header>\n          <BootstrapModal.Body>\n            { this.state.addStory ?\n              <div>\n                <h6 className=\"semi-bold\">Tell us your story...<span className=\"text-danger\">*</span></h6>\n                <textarea className=\"form-control\" rows=\"8\" name=\"story\" value={this.state.userStory} onChange={this.handleChange}/>\n              </div>\n            :(\n              <div>\n                <h6 className=\"semi-bold\">What's your name?<span className=\"text-danger\">*</span></h6>\n                <input className=\"form-control\" name=\"user\" value={this.state.userName} onChange={this.handleChange}/>\n              </div>\n            ) }\n          </BootstrapModal.Body>\n          <BootstrapModal.Footer>\n            <button id=\"submit-btn\" type=\"submit\" className=\"btn btn-block btn-primary\" style={{display: `${ this.state.addStory ? 'block': 'none'}`}} onClick={this.handleSubmit}>Submit</button>\n            <button id=\"next-btn\" type=\"button\" className=\"btn btn-block btn-primary\" onClick={this.handleStory} style={{display: `${ this.state.addStory ? 'none': 'block'}`}}>Next</button>\n          </BootstrapModal.Footer>\n        </BootstrapModal>\n      </div>\n    )\n  }\n}\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeart } from '@fortawesome/free-regular-svg-icons';\nimport Modal from './Modal';\n\nclass Main extends Component{\n  constructor(props){\n    super(props)\n\n    this.state = {\n      stories: [],\n      viewBoard: false\n    }\n\n    this.displayBoard = this.displayBoard.bind(this);\n    this.changeValue = this.changeValue.bind(this);\n    this.addLike = this.addLike.bind(this);\n  }\n\n  displayBoard(e){\n    e.preventDefault();\n    this.setState({\n      viewBoard: true\n    })\n  }\n\n  changeValue(name, story){\n    let postData = {\n      'name': name,\n      'story': story,\n      'likes': 0,\n    }\n\n    this.setState({\n      stories: [...this.state.stories, postData]\n    });\n  }\n\n  addLike(row){\n    const stories = this.state.stories;\n    stories[row].likes += 1;\n    this.setState({\n      stories: stories\n    })\n  }\n\n  render(){\n    const {stories, viewBoard} = this.state\n    return(\n      <div>\n        <form>\n          <Modal formValue={this.changeValue}/>\n        </form>\n        <div className=\"row mt-3 text-center\" style={{display: `${viewBoard ? 'none': 'block'}`}}>\n          <div className=\"col-md-12\">\n            <a href=\"#\" className=\"mt-3\" onClick={this.displayBoard}>View the Board</a>\n          </div>\n        </div>\n        { viewBoard ? [\n          ( stories.length > 0 ?\n            <div className='row mt-4'>\n              <div className='col-md-1'></div>\n              <div className='col-md-10'>\n                <div className=\"row\">\n                { stories.map((story, index) =>\n                  (\n                    <div className=\"col-md-3\" key={index}>\n                      <div className='card'>\n                        <div className='card-body'>\n                          <p>{story.story}</p>\n                          <h6 className='semi-bold text-right'>-&nbsp;{story.name}</h6>\n                        </div>\n                        <div className='card-footer p-0 text-right'>\n                          <button className='btn btn-icon p-2' onClick={() => this.addLike(index)}><FontAwesomeIcon icon={faHeart} className='heart-btn'/></button>\n                          { story.likes > 0 ? <span className=\"mr-3 semi-bold\">{story.likes}</span> : null}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          :(\n            <div className=\"row mt-5\">\n              <div className=\"col-md-12 text-center\">\n                <img src={process.env.PUBLIC_URL + '/static/img/person.jpg'} className=\"img-fluid\" height=\"300px\" width=\"300px\"/>\n                <h5 className=\"semi-bold\">Oops. No stories yet. Be the first one to share!</h5>\n              </div>\n            </div>\n          ))]\n        : (\n          <></>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('main')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}